name: Build and deploy containers to Azure Container Apps

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - '.github/workflows/**'
      - 'dotnet-api/**'
      - 'angular-frontend/**'
      - 'nginx-reverse-proxy/**'

env:
  AZURE_CONTAINER_REGISTRY: acrdemoapp1
  API_IMAGE_NAME: demoapp1-dotnet-api
  FRONTEND_IMAGE_NAME: demoapp1-angular-frontend
  PROXY_IMAGE_NAME: demoapp1-nginx-reverse-proxy
  API_CONTAINER_APP_NAME: demoapp1-dotnet-api
  FRONTEND_CONTAINER_APP_NAME: demoapp1-angular-frontend
  PROXY_CONTAINER_APP_NAME: demoapp1-nginx-reverse-proxy
  CONTAINERAPPS_ENVIRONMENT: ae-aca-demoapp1
  RESOURCE_GROUP: rg-aca-demoapp1
  LOCATION: westeurope

permissions:
  contents: read

jobs:
  build-push-container-images:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"

      - name: Build .NET API
        run: |
          cd dotnet-api
          dotnet restore
          dotnet build --configuration Release --no-restore
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Build Angular Frontend
        run: |
          cd angular-frontend
          npm ci --legacy-peer-deps
          npm run build:prod
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
          username: ${{ secrets.AZURE_REGISTRY_USERNAME }}
          password: ${{ secrets.AZURE_REGISTRY_PASSWORD }}

      - name: Build and push .NET API container image to ACR
        uses: docker/build-push-action@v6
        with:
          context: ./dotnet-api
          push: true
          tags: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.API_IMAGE_NAME }}:${{ github.run_number }}
          file: ./dotnet-api/Dockerfile
          platforms: linux/amd64

      - name: Build and push Angular Frontend container image to ACR
        uses: docker/build-push-action@v6
        with:
          context: ./angular-frontend
          push: true
          tags: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.run_number }}
          file: ./angular-frontend/Dockerfile
          platforms: linux/amd64

      - name: Build and push Nginx Reverse Proxy container image to ACR
        uses: docker/build-push-action@v6
        with:
          context: ./nginx-reverse-proxy
          push: true
          tags: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.PROXY_IMAGE_NAME }}:${{ github.run_number }}
          file: ./nginx-reverse-proxy/Dockerfile
          platforms: linux/amd64

  deploy-to-container-apps:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build-push-container-images

    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy .NET API to Azure Container Apps
        uses: azure/container-apps-deploy-action@v1
        with:
          registryUrl: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
          imageToDeploy: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.API_IMAGE_NAME }}:${{ github.run_number }}
          targetPort: 80
          ingress: internal
          containerAppName: ${{ env.API_CONTAINER_APP_NAME }}
          containerAppEnvironment: ${{ env.CONTAINERAPPS_ENVIRONMENT }}
          resourceGroup: ${{ env.RESOURCE_GROUP }}
          environmentVariables: |
            ASPNETCORE_ENVIRONMENT=Production
            ASPNETCORE_URLS=http://+:80
      - name: Get API URL
        id: api-url
        run: |
          API_URL=$(az containerapp show \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.API_CONTAINER_APP_NAME }} \
            --query properties.configuration.ingress.fqdn -o tsv)
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
      - name: Deploy Angular Frontend to Azure Container Apps
        uses: azure/container-apps-deploy-action@v1
        with:
          registryUrl: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
          imageToDeploy: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.run_number }}
          targetPort: 80
          ingress: internal
          containerAppName: ${{ env.FRONTEND_CONTAINER_APP_NAME }}
          containerAppEnvironment: ${{ env.CONTAINERAPPS_ENVIRONMENT }}
          resourceGroup: ${{ env.RESOURCE_GROUP }}
          environmentVariables: |
            NODE_ENV=production
      - name: Get Frontend URL
        id: frontend-url
        run: |
          FRONTEND_URL=$(az containerapp show \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.FRONTEND_CONTAINER_APP_NAME }} \
            --query properties.configuration.ingress.fqdn -o tsv)
          echo "frontend_url=$FRONTEND_URL" >> $GITHUB_OUTPUT
      - name: Deploy Nginx Reverse Proxy to Azure Container Apps
        uses: azure/container-apps-deploy-action@v1
        with:
          registryUrl: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
          imageToDeploy: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.PROXY_IMAGE_NAME }}:${{ github.run_number }}
          targetPort: 80
          ingress: external
          containerAppName: ${{ env.PROXY_CONTAINER_APP_NAME }}
          containerAppEnvironment: ${{ env.CONTAINERAPPS_ENVIRONMENT }}
          resourceGroup: ${{ env.RESOURCE_GROUP }}
          environmentVariables: |
            API_URL=https://${{ steps.api-url.outputs.api_url }}
            FRONTEND_URL=https://${{ steps.frontend-url.outputs.frontend_url }}
      - name: Get Application URL
        run: |
          echo "ðŸš€ Application deployed successfully!"
          echo "Application URL:"
          az containerapp show \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.PROXY_CONTAINER_APP_NAME }} \
            --query properties.configuration.ingress.fqdn -o tsv
          echo ""
          echo "ðŸ”— Individual component URLs:"
          echo "API: https://${{ steps.api-url.outputs.api_url }}"
          echo "Frontend: https://${{ steps.frontend-url.outputs.frontend_url }}"
          echo "Proxy (Main): https://$(az containerapp show --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.PROXY_CONTAINER_APP_NAME }} --query properties.configuration.ingress.fqdn -o tsv)"
